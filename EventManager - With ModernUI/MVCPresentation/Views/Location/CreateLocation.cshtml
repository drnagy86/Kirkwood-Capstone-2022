@model DataObjects.Location
@using Microsoft.AspNet.Identity
@using Microsoft.AspNet.Identity.Owin;
@using DataObjects;

@{
    ViewBag.Title = "CreateLocation";
    Layout = "~/Views/Shared/_SupplierDetailsLayout.cshtml";

    ApplicationUserManager userManager = Context.GetOwinContext().GetUserManager<ApplicationUserManager>();
    var loggedInUser = userManager.FindById(User.Identity.GetUserId());
}

<br>
<div>
    <i class="bi bi-arrow-left"></i>@Html.ActionLink("Back to List", "ViewLocations")
</div>
<br>



@using (Html.BeginForm())
{
    <div class="d-flex justify-content-center">
        @Html.AntiForgeryToken()

        <div class="form-horizontal ms-3 w-50">
            <h4>Create Location</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PricingInfo, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.PricingInfo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PricingInfo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label" })
                <div data-format="+1 (ddd) ddd-dddd">
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Address1, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Address2, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label" })
                <div onchange="zipCheck()">
                    @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @id = "City" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.DropDownListFor(model => model.State, new SelectList(Enum.GetValues(typeof(State))), new { htmlAttributes = new { @class = "form-select" } })
                </div>
            </div>
            <div class="d-flex justify-content-center">
                


                <div class="form-group">
                    <div>
                        <input type="submit" value="Create" class="btn btn-primary" />
                    </div>
                </div>
            </div> 
            
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
